#!/bin/env ruby
require 'thor'
require 'net/ssh'
require_relative 'minilog'

class CLI < Thor
  include MiniLog

  DOKKU_TAG = ENV["DOKKU_TAG"] || 'v0.26.6'

  desc "install (REMOTE_IP)", "installs dokku on host specified by REMOTE_IP"
  def install(host_ip = ENV["REMOTE_IP"] || '127.0.0.1')
    log :default, "installing dokku on host #{host_ip}"

    init_host    host_ip
    add_ssh_keys host_ip
  end

  desc "exec [REMOTE_IP] [COMMAND] (OPTIONS)", "provides direct access to dokku on REMOTE_IP"
  def exec(host_ip = '127.0.0.1', *kwargs)
    kwargs = kwargs.join(" ")
    log :default, "running 'dokku #{kwargs}' on host #{host_ip}"
    ssh_session host_ip do |ssh|
      puts ssh.exec!("dokku #{kwargs}")
    end
    log :default, "connection to #{host_ip} closed"
  end

  private

  def init_host host_ip
    ssh_session host_ip do |ssh|
      has_bootstrap = file_exists?(ssh, '/tmp/bootstrap.sh')

      log :debug, "/tmp/bootstrap.sh#{has_bootstrap ? " " : " not "}found"
      unless has_bootstrap
        log :default, "downloading dokku bootstrap.sh @ #{DOKKU_TAG}..."
        ssh.exec!("wget 'https://raw.githubusercontent.com/dokku/dokku/#{DOKKU_TAG}/bootstrap.sh'")
        log :debug, "installing dokku..."
	    ssh.exec!("bash bootstrap.sh")
        log :default, "  done"
      end
    end
  end

  def add_ssh_keys host_ip
    log :info, "syncing dokku ssh keys with host keys..."
    ssh_session host_ip do |ssh|
      ssh.exec!("cat ~/.ssh/authorized_keys | dokku ssh-keys:add admin")
    end
    log :info, "  done"
  end

  def file_exists? ssh, path
    has_file = false
    ssh.exec!("ls -l '#{path}'") do |channel, stream, data|
      log :debug, "checking if '#{path}' exists..."
      has_file = true if stream == :stdout && /bootstrap/.match(data)
    end
    has_file
  end

  def ssh_session host_ip = '127.0.0.1'
    port  = ENV['SSH_PORT'] || 22
    uname = ENV['SSH_USER'] || 'root'
    Net::SSH.start(host_ip, uname, { port: port }) do |ssh|
      log_shift do
        yield ssh
      end
    end
  end
end

CLI.start(ARGV)
